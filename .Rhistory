# Print the scaled data
head(as.data.frame(Mitosis_Ctrl_MM))
#I think it's time to clean up the environment to maintain an overview
rm(nonzero_rows, column_values,max_values_Ctrl,max_values_RNase,p_values_Ctrl,p_values_RNase,RDeeP_HeLa_Mitosis_p,bad_proteins10,bad_proteins10wierd,num_sets,p_values,protein1_Ctrl_frac1,protein8_Ctrl_frac1,bad_proteins5)
# Step 1: Extract the row you want to find peaks in
row_index <- 6  # Adjust the row index as needed
row_name <- row.names(Mitosis_Ctrl_100)[row_index] #name of plot adapts depending on protein viewed #also works if Mitosis_RNase_100, bc both dataframes would plot the same protein
# Step 2: Extrakt the data for Ctrl and RNase
row_data_Ctrl <- Mitosis_Ctrl_100[row_index, ]
row_data_RNase <- Mitosis_RNase_100[row_index, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_index, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_index, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Step 1: Select a specific row by name
row_name <- "2A5E_HUMAN"
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_100[row_name, ]
row_data_RNase <- Mitosis_RNase_100[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
#as.vector(Ctrl_fraction_max) #just numbers (aka fractions where max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_RNase_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_RNase_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_RNase_100)
# Create a dataframe with the results
RNase_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
RNase_fraction_max <- data.frame(Fraction = column_indices)
#hier kommt bei mir Fehler raus, da anscheinend unsere Daten unterschiedlich lang sind
# Print the results
# Shows protein name, fraction where global maxima was found and the maximum value
print(RNase_fraction_max_value)
print(RNase_fraction_max)
#Results as vector
#as.vector(RNase_fraction_max) #just numbers (aka fractions where max)
# Subtract the values and determine the shift
shift_result <- Ctrl_fraction_max - RNase_fraction_max
shift_result <- ifelse(shift_result == 0, "no shift", ifelse(shift_result > 0, "left shift", "right shift"))
# Code which would assign a shift of 1 to "no shift": *HERE THE NUMBER CAN BE CHANGED!*
# shift_result <- ifelse((shift_result >= -1) & (shift_result <= 1), "no shift", ifelse(shift_result > 1, "left shift", "right shift"))
# Create a new dataframe with the shift result and row names
shift_dataframe <- data.frame(Shift = shift_result, row.names = row.names(Ctrl_fraction_max))
colnames(shift_dataframe)[1] <- "Shift"
# Print the new dataframe
print(shift_dataframe)
# Count the number of left shifts
sum(shift_dataframe$Shift == "left shift")
sum(shift_dataframe$Shift == "right shift")
sum(shift_dataframe$Shift == "no shift")
# Step 1: Find column indices of local maxima in Mitosis_RNase_100
RNase_maxima <- apply(Mitosis_RNase_100, 1, function(row) {
local_maxima <- which(row == max(row))
return(local_maxima)
})
# Step 2: Create RNase_maxima dataframe with row names
RNase_maxima <- data.frame(Maxima = I(RNase_maxima), row.names = row.names(Mitosis_RNase_100))
# Step 3: Repeat the same process for Mitosis_Ctrl_100
Ctrl_maxima <- apply(Mitosis_Ctrl_100, 1, function(row) {
local_maxima <- which(row == max(row))
return(local_maxima)
})
Ctrl_maxima <- data.frame(Maxima = I(Ctrl_maxima), row.names = row.names(Mitosis_Ctrl_100))
# Step 4: Compare number of maxima and column indices between RNase_maxima and Ctrl_maxima
identical_fractions <- data.frame(Result = row.names(Mitosis_RNase_100), row.names = row.names(Mitosis_RNase_100), stringsAsFactors = FALSE)
identical_fractions$Result <- RNase_maxima$Maxima == Ctrl_maxima$Maxima &
lengths(RNase_maxima$Maxima) == lengths(Ctrl_maxima$Maxima)
# Step 5: Print the identical_fractions dataframe
print(identical_fractions)
View(Mitosis_RNase_100)
# Step 1: Select a specific row by name
row_name <- "3HIDH_HUMAN" #"2A5E_HUMAN"
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_100[row_name, ]
row_data_RNase <- Mitosis_RNase_100[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Step 1: Select a specific row by name
row_name <- "2A5E_HUMAN"
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_100[row_name, ]
row_data_RNase <- Mitosis_RNase_100[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
knitr::opts_chunk$set(echo = TRUE)
#generate a dataframe that holds the nummeric data of the shift. Dataframe has to have 2 dimension: RNase fraction and control fraction
maximum_fraction <- data.frame(Ctrl_fraction_max, RNase_fraction_max)
colnames(maximum_fraction) <- c("Ctrl_fraction_max", "RNase_fraction_max")
show(maximum_fraction)
plot(maximum_fraction, main = "comparison of maxima")
#find the optimal amount of cluster before k-means
#hier bin ich fÃ¼r die Funktion "fviz_nbclust" nicht darum gekommen das package factoextra zu installieren. Nach Alternativen suche ich noch
fviz_nbclust(maximum_fraction, kmeans, method='silhouette') #optimal number of cluster = 2
km3 <- kmeans(maximum_fraction, centers = 3, nstart = 25)
km3
fviz_cluster(km3, data = maximum_fraction)
knitr::opts_chunk$set(echo = TRUE)
Mitosis_Ctrl_clean
Mitosis_Ctrl_mean
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# First dataframe
df1 <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6),
C = c(7, 8, 9)
)
# Second dataframe
df2 <- data.frame(
X = c(10, 11, 12),
Y = c(13, 14, 15),
Z = c(16, 17, 18)
)
# Row name for the desired row in both dataframes
row_name <- "row2"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_df1 <- df1[row_name, ]
row_data_df2 <- df2[row_name, ]
# Find the global maximum from the selected row in df1
row_global_max_df1 <- max(row_data_df1)
# Find the global maximum from the selected row in df2
row_global_max_df2 <- max(row_data_df2)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_df2 - row_global_max_df1
# Print the global maximums and the difference in y-values
print(row_global_max_df1)
print(row_global_max_df2)
print(y_diff)
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# Row name for the desired row in both dataframes
row_name <- "2A5E_HUMAN"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_df1 <- Mitosis_Ctrl_mean[row_name, ]
row_data_df2 <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in df1
row_global_max_df1 <- max(row_data_df1)
# Find the global maximum from the selected row in df2
row_global_max_df2 <- max(row_data_df2)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_df2 - row_global_max_df1
# Print the global maximums and the difference in y-values
print(row_global_max_df1)
print(row_global_max_df2)
print(y_diff)
# Step 1: Select a specific row by name
row_name <- "2A5E_HUMAN"
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_mean[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_mean[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Step 1: Select a specific row by name
row_name <- "2A5E_HUMAN"
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_mean[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,525000), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_mean[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
max(Mitosis_Ctrl_mean["2A5E_HUMAN"])
max(Mitosis_Ctrl_mean["2A5E_HUMAN", ])
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# Row name for the desired row in both dataframes
row_name <- "2A5E_HUMAN"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in Ctrl
row_global_max_Ctrl <- max(row_data_Ctrl)
# Find the global maximum from the selected row in RNase
row_global_max_RNase <- max(row_data_RNase)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_Ctrl - row_global_max_RNase
# Print the global maximums and the difference in y-values
print(row_global_max_Ctrl)
print(row_global_max_RNase)
print(y_diff)
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# Row name for the desired row in both dataframes
row_name <- "2A5E_HUMAN"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in Ctrl
row_global_max_Ctrl <- max(row_data_Ctrl)
# Find the global maximum from the selected row in RNase
row_global_max_RNase <- max(row_data_RNase)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_Ctrl - row_global_max_RNase
# Print the global maximums and the difference in y-values
print(row_global_max_Ctrl)
print(row_global_max_RNase)
print(y_diff)
if(y_diff > 0) {print("Down shift")}
if(y_diff < 0) {print("Up shift")}
else {print("No shift")}
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# Row name for the desired row in both dataframes
row_name <- "2A5E_HUMAN"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in Ctrl
row_global_max_Ctrl <- max(row_data_Ctrl)
# Find the global maximum from the selected row in RNase
row_global_max_RNase <- max(row_data_RNase)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_Ctrl - row_global_max_RNase
# Print the global maximums and the difference in y-values
print(row_global_max_Ctrl)
print(row_global_max_RNase)
print(y_diff)
if(y_diff > 0) {print("Down shift")}
if(y_diff < 0) {print("Up shift")}
else {print("No shift")}
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# Row name for the desired row in both dataframes
row_name <- "2A5E_HUMAN"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in Ctrl
row_global_max_Ctrl <- max(row_data_Ctrl)
# Find the global maximum from the selected row in RNase
row_global_max_RNase <- max(row_data_RNase)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_Ctrl - row_global_max_RNase
# Print the global maximums and the difference in y-values
print(row_global_max_Ctrl)
print(row_global_max_RNase)
print(y_diff)
if(y_diff > 0) {print("Down shift")}
if(y_diff < 0) {print("Up shift")}
if(y_diff = 0) {print("No shift")}
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# Row name for the desired row in both dataframes
row_name <- "2A5E_HUMAN"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in Ctrl
row_global_max_Ctrl <- max(row_data_Ctrl)
# Find the global maximum from the selected row in RNase
row_global_max_RNase <- max(row_data_RNase)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_Ctrl - row_global_max_RNase
# Print the global maximums and the difference in y-values
print(row_global_max_Ctrl)
print(row_global_max_RNase)
print(y_diff)
if(y_diff > 0) {print("Down shift")}
if(y_diff < 0) {print("Up shift")}
if(y_diff ==0) {print("No shift")}
#Mitosis_Ctrl_clean
#Mitosis_Ctrl_mean
# Row name for the desired row in both dataframes
row_name <- "2A5E_HUMAN"  # Replace with the actual row name
# Select the specific row from both dataframes
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in Ctrl
row_global_max_Ctrl <- max(row_data_Ctrl)
# Find the global maximum from the selected row in RNase
row_global_max_RNase <- max(row_data_RNase)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_Ctrl - row_global_max_RNase
# Print the global maximums and the difference in y-values
print(row_global_max_Ctrl)
print(row_global_max_RNase)
print(y_diff)
if(y_diff > 0) {print("Down shift")}
if(y_diff < 0) {print("Up shift")}
if(y_diff == 0) {print("No shift")}
knitr::opts_chunk$set(echo = TRUE)
# Step 1: Select a specific row by name
row_name <- "2A5E_HUMAN"
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_mean[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,525000), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_mean[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
max(Mitosis_Ctrl_mean[row_name, ])
# Step 1: Select a specific row by name
row_name <- "2A5E_HUMAN"
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_mean[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,525000), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_mean[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
max(Mitosis_Ctrl_mean[row_name, ])
max(Mitosis_RNase_mean[row_name, ])
knitr::opts_chunk$set(echo = TRUE)
#generate a dataframe that holds the nummeric data of the shift. Dataframe has to have 2 dimension: RNase fraction and control fraction
maximum_fraction <- data.frame(Ctrl_fraction_max, RNase_fraction_max)
colnames(maximum_fraction) <- c("Ctrl_fraction_max", "RNase_fraction_max")
show(maximum_fraction)
plot(maximum_fraction, main = "comparison of maxima")
#find the optimal amount of cluster before k-means
#hier bin ich fÃ¼r die Funktion "fviz_nbclust" nicht darum gekommen das package factoextra zu installieren. Nach Alternativen suche ich noch
fviz_nbclust(maximum_fraction, kmeans, method='silhouette') #optimal number of cluster = 2
#then a k-means clustering with the optimal amount of cluster and interpretation
km <- kmeans(maximum_fraction, centers = 2, nstart = 25)
#visualizing the result of kmeans
km
#visualizing the result of kmeans
km
fviz_cluster(km, data = maximum_fraction)
library(cluster, lib.loc = "C:/Program Files/R/R-4.2.1/library")
library(factoextra)
#generate a dataframe that holds the nummeric data of the shift. Dataframe has to have 2 dimension: RNase fraction and control fraction
maximum_fraction <- data.frame(Ctrl_fraction_max, RNase_fraction_max)
colnames(maximum_fraction) <- c("Ctrl_fraction_max", "RNase_fraction_max")
show(maximum_fraction)
plot(maximum_fraction, main = "comparison of maxima")
#find the optimal amount of cluster before k-means
#hier bin ich fÃ¼r die Funktion "fviz_nbclust" nicht darum gekommen das package factoextra zu installieren. Nach Alternativen suche ich noch
library(cluster)
library(ggplot2)
library(factoextra)
fviz_nbclust(maximum_fraction, kmeans, method='silhouette') #optimal number of cluster = 2
fviz_nbclust(maximum_fraction, kmeans, method='wss')        #optimal number of cluster = 2
#fviz_nbclust(maximum_fraction, kmeans, method='gap_stat')   #optimal number of cluster = 6 ?!
#then a k-means clustering with the optimal amount of cluster and interpretation
km <- kmeans(maximum_fraction, centers = 2, nstart = 25)
#visualizing the result of kmeans
km
fviz_cluster(km, data = maximum_fraction)
#generate a dataframe that holds the nummeric data of the shift. Dataframe has to have 2 dimension: RNase fraction and control fraction
maximum_fraction <- data.frame(Ctrl_fraction_max, RNase_fraction_max)
colnames(maximum_fraction) <- c("Ctrl_fraction_max", "RNase_fraction_max")
show(maximum_fraction)
plot(maximum_fraction, main = "comparison of maxima")
#find the optimal amount of cluster before k-means
#hier bin ich fÃ¼r die Funktion "fviz_nbclust" nicht darum gekommen das package factoextra zu installieren. Nach Alternativen suche ich noch
library(cluster)
library(ggplot2)
library(factoextra)
fviz_nbclust(maximum_fraction, kmeans, method='silhouette') #optimal number of cluster = 2
#fviz_nbclust(maximum_fraction, kmeans, method='wss')        #optimal number of cluster = 2
#fviz_nbclust(maximum_fraction, kmeans, method='gap_stat')   #optimal number of cluster = 6 ?!
#then a k-means clustering with the optimal amount of cluster and interpretation
km <- kmeans(maximum_fraction, centers = 2, nstart = 25)
#visualizing the result of kmeans
km
fviz_cluster(km, data = maximum_fraction)
km3 <- kmeans(maximum_fraction, centers = 3, nstart = 25)
km3
fviz_cluster(km3, data = maximum_fraction)
#macht vlt aus biologischer Sicht mehr Sinn. WÃ¼rde das Clustering gerne nochmal nach Verenas Quotienten-Idee durchfÃ¼hren
