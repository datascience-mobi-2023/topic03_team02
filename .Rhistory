knitr::opts_chunk$set(echo = TRUE)
RDeeP_HeLa_Mitosis = read.csv("https://www.dropbox.com/scl/fi/3i6ht1g6clxhv28iufvyz/RDeeP_HeLa_Mitosis.csv?rlkey=awdsnjuy8xxeybr0r4twhu9fu&dl=1", header=TRUE, row.names=1, sep = ";")
head(RDeeP_HeLa_Mitosis)
library(cluster)
library(ggplot2)
library(factoextra)
library(VennDiagram)
library(Metrics)
dim(RDeeP_HeLa_Mitosis)
head(rownames(RDeeP_HeLa_Mitosis))
head(colnames(RDeeP_HeLa_Mitosis))
which(rowSums(RDeeP_HeLa_Mitosis)==0) #this is repeated later on, after splitting the dataset in two
print(RDeeP_HeLa_Mitosis["KLD10_HUMAN",])
RDeeP_HeLa_Mitosis <- RDeeP_HeLa_Mitosis[-which(rowSums(RDeeP_HeLa_Mitosis)==0),]
dim(RDeeP_HeLa_Mitosis)
# Find rows without any zeros
nonzero_rows <- RDeeP_HeLa_Mitosis[rowSums(RDeeP_HeLa_Mitosis == 0) == 0, ]
# Checking for negative vales
any(RDeeP_HeLa_Mitosis < 0) # -> none, so not a problem
#The condition rowSums(RDeep_Hela_Mitosis == 0) == 0 checks which rows have a sum of zeros equal to zero, indicating that those rows do *not* contain any zeros.
# Print the rows without any zeros: print(nonzero_rows)
nrow(nonzero_rows) #320 rows do not have zeros. But not relevant for our further analysis
#Possibly deleting these nonzero rows and storing it in the original matrix:
#RDeeP_HeLa_Mitosis <- RDeeP_HeLa_Mitosis[rowSums(RDeeP_HeLa_Mitosis == 0) > 0, ]
sum(apply(RDeeP_HeLa_Mitosis, 1, is.na)) # Summe aller Spalten, die NA Werte haben
sum(apply(RDeeP_HeLa_Mitosis, 2, is.na)) # Summe aller Zeilen, die NA Werte haben
sum(apply(RDeeP_HeLa_Mitosis, 1, is.numeric))
sum(apply(RDeeP_HeLa_Mitosis, 2, is.numeric))
sum(apply(RDeeP_HeLa_Mitosis, 1, is.numeric)) == nrow(RDeeP_HeLa_Mitosis)
#Complete DataSet
#View(RDeeP_HeLa_Mitosis)
# Extract the first three values from the table
protein1_Ctrl_frac1 <- RDeeP_HeLa_Mitosis[1, 1:3] #Zeile 1, Spalten eins bis drei
# Perform the t-test
print(t.test(protein1_Ctrl_frac1))
# Extract the first three values from the table
protein8_Ctrl_frac1 <- RDeeP_HeLa_Mitosis[8, 1:3]
# Perform the t-test
print(t.test(protein8_Ctrl_frac1))
#t.test(c(206396.80, 302858.50, 333653.20)) #Protein 23 as comparison
#easiest way is to separately define the columns we want to put into the new data frame
RDeeP_HeLa_Mitosis_Ctrl = cbind(RDeeP_HeLa_Mitosis[,1:3],RDeeP_HeLa_Mitosis[,7:9],RDeeP_HeLa_Mitosis[,13:15],RDeeP_HeLa_Mitosis[,19:21],RDeeP_HeLa_Mitosis[,25:27],RDeeP_HeLa_Mitosis[,31:33],RDeeP_HeLa_Mitosis[,37:39],RDeeP_HeLa_Mitosis[,43:45],RDeeP_HeLa_Mitosis[,49:51],RDeeP_HeLa_Mitosis[,55:57],RDeeP_HeLa_Mitosis[,61:63],RDeeP_HeLa_Mitosis[,67:69],RDeeP_HeLa_Mitosis[,73:75],RDeeP_HeLa_Mitosis[,79:81],RDeeP_HeLa_Mitosis[,85:87],RDeeP_HeLa_Mitosis[,91:93],RDeeP_HeLa_Mitosis[,97:99],RDeeP_HeLa_Mitosis[,103:105],RDeeP_HeLa_Mitosis[,109:111],RDeeP_HeLa_Mitosis[,115:117],RDeeP_HeLa_Mitosis[,121:123],RDeeP_HeLa_Mitosis[,127:129],RDeeP_HeLa_Mitosis[,133:135],RDeeP_HeLa_Mitosis[,139:141],RDeeP_HeLa_Mitosis[,145:147])
#For RNase it is easier, because we now can just take all the row which were not taken in the first table.
RDeeP_HeLa_Mitosis_RNase=RDeeP_HeLa_Mitosis[,-which(names(RDeeP_HeLa_Mitosis) %in% colnames(RDeeP_HeLa_Mitosis_Ctrl))]
head(RDeeP_HeLa_Mitosis_RNase)
# Calculate the number of sets in the Control Dataset
num_sets <- ncol(RDeeP_HeLa_Mitosis_Ctrl) %/% 3
print(num_sets) #25 - number of fractions
# Create an empty dataframe to store the p-values
p_values_Ctrl <- data.frame(matrix(ncol = num_sets, nrow = nrow(RDeeP_HeLa_Mitosis_Ctrl)))
print(p_values_Ctrl)
# Iterate over every set of three columns
for (i in seq(1, ncol(RDeeP_HeLa_Mitosis_Ctrl), by = 3)) {
# Extract the values for the current set of three columns
column_values <- RDeeP_HeLa_Mitosis_Ctrl[, i:(i + 2)]
# Calculate the p-values for the set of three columns using t-tests
p_values <- apply(column_values, 1, function(x) {
if (length(unique(x)) > 1) {
t_result <- t.test(x)
t_result$p.value
} else {
0  # Assign 0 if the data is constant (OR NA, then we have to replace na with zero later on)
}
})
# Assign the p-values to the corresponding column in the new dataframe
p_values_Ctrl[, (i %/% 3 + 1)] <- p_values
}
# Optional: Rename the columns
colnames(p_values_Ctrl) <- paste("P-Values_Frac", 1:25,sep="")
rownames(p_values_Ctrl) <- rownames(RDeeP_HeLa_Mitosis_Ctrl)
# Print the new dataframe
print(p_values_Ctrl)
# Replace NA values with zero in p_values_Ctrl dataframe
# p_values_Ctrl[is.na(p_values_Ctrl)] <- 0
# Create a new dataframe to store the maximum values
max_values_Ctrl <- data.frame(MaxValue = apply(p_values_Ctrl[, -1], 1, max))
# Adding the protein names to the new dataframe:
rownames(max_values_Ctrl) <- rownames(p_values_Ctrl)
# Print the new dataframe
print(max_values_Ctrl)
# Calculate the number of sets in the RNase dataset
num_sets <- ncol(RDeeP_HeLa_Mitosis_RNase) %/% 3
# Create an empty dataframe to store the p-values
p_values_RNase <- data.frame(matrix(ncol = num_sets, nrow = nrow(RDeeP_HeLa_Mitosis_RNase)))
# Iterate over every set of three columns
for (i in seq(1, ncol(RDeeP_HeLa_Mitosis_RNase), by = 3)) {
# Extract the values for the current set of three columns
column_values <- RDeeP_HeLa_Mitosis_RNase[, i:(i + 2)]
# Calculate the p-values for the set of three columns using t-tests
p_values <- apply(column_values, 1, function(x) {
if (length(unique(x)) > 1) {
t_result <- t.test(x)
t_result$p.value
} else {
0  # Assign 0 if the data is constant (or NA)
}
})
# Assign the p-values to the corresponding column in the new dataframe
p_values_RNase[, (i %/% 3 + 1)] <- p_values
}
# Optional: Rename the columns
colnames(p_values_RNase) <- paste("P-Values_Frac", 1:25,sep="")
rownames(p_values_RNase) <- rownames(RDeeP_HeLa_Mitosis_RNase)
# Print the new dataframe
print(p_values_RNase)
# Finding the maximum
# Create a new dataframe to store the maximum values
max_values_RNase <- data.frame(MaxValue = apply(p_values_RNase[, -1], 1, max))
# Adding the protein names to the new dataframe:
rownames(max_values_RNase) <- rownames(p_values_RNase)
# Print the new dataframe
print(max_values_RNase)
#Testing how many RNase values we have above 5%/10%:
sum(max_values_RNase > 0.05)
sum(max_values_RNase > 0.1)
#For control
sum(max_values_Ctrl > 0.05)
sum(max_values_Ctrl > 0.1)
# --> RNase has a lot more fluctiation in comparison to Control!
#Alternative ways to calculate the above
#length(which(max_values_RNase > 0.1))
#length(max_values_RNase[max_values_RNase$MaxValue > 0.1, ])
RDeeP_HeLa_Mitosis_p <- data.frame(RDeeP_HeLa_Mitosis, max_values_Ctrl, max_values_RNase)
# Identify all rows where the value in _one_ of the last two columns exceeds 5% or 10%
bad_proteins5 <- which(RDeeP_HeLa_Mitosis_p[, 151] > 0.05 | RDeeP_HeLa_Mitosis_p[, 152] > 0.05)
bad_proteins10 <- which(RDeeP_HeLa_Mitosis_p[, 151] > 0.1 | RDeeP_HeLa_Mitosis_p[, 152] > 0.1)
#When using the logical OR (|) operator, if either condition is true, the result will be true.
length(bad_proteins5)
length(bad_proteins10)
RDeeP_HeLa_Mitosis_clean <- RDeeP_HeLa_Mitosis_p[!(RDeeP_HeLa_Mitosis_p[, 151] > 0.1 | RDeeP_HeLa_Mitosis_p[, 152] > 0.1), ] #the ! Operator negate the condition. It excludes rows where the condition is TRUE, thus effectively filtering out rows that exceed 10%.
# Remove the last two columns
RDeeP_HeLa_Mitosis_clean <- RDeeP_HeLa_Mitosis_clean[, 1:(ncol(RDeeP_HeLa_Mitosis_clean) - 2)]
#Print the new dataframe
print(RDeeP_HeLa_Mitosis_clean)
#Now we have to again separate our clean dataframe into Control and RNase
Mitosis_Ctrl_clean = cbind(RDeeP_HeLa_Mitosis_clean[,1:3],RDeeP_HeLa_Mitosis_clean[,7:9],RDeeP_HeLa_Mitosis_clean[,13:15],RDeeP_HeLa_Mitosis_clean[,19:21],RDeeP_HeLa_Mitosis_clean[,25:27],RDeeP_HeLa_Mitosis_clean[,31:33],RDeeP_HeLa_Mitosis_clean[,37:39],RDeeP_HeLa_Mitosis_clean[,43:45],RDeeP_HeLa_Mitosis_clean[,49:51],RDeeP_HeLa_Mitosis_clean[,55:57],RDeeP_HeLa_Mitosis_clean[,61:63],RDeeP_HeLa_Mitosis_clean[,67:69],RDeeP_HeLa_Mitosis_clean[,73:75],RDeeP_HeLa_Mitosis_clean[,79:81],RDeeP_HeLa_Mitosis_clean[,85:87],RDeeP_HeLa_Mitosis_clean[,91:93],RDeeP_HeLa_Mitosis_clean[,97:99],RDeeP_HeLa_Mitosis_clean[,103:105],RDeeP_HeLa_Mitosis_clean[,109:111],RDeeP_HeLa_Mitosis_clean[,115:117],RDeeP_HeLa_Mitosis_clean[,121:123],RDeeP_HeLa_Mitosis_clean[,127:129],RDeeP_HeLa_Mitosis_clean[,133:135],RDeeP_HeLa_Mitosis_clean[,139:141],RDeeP_HeLa_Mitosis_clean[,145:147])
#For RNase
Mitosis_RNase_clean=RDeeP_HeLa_Mitosis_clean[,-which(names(RDeeP_HeLa_Mitosis_clean) %in% colnames(Mitosis_Ctrl_clean))]
#additional cleanup: deleting all rows in RNase and Ctrl which are zero, removing these rows from the entire clean dataframe
which(rowSums(Mitosis_Ctrl_clean)==0)
which(rowSums(Mitosis_RNase_clean)==0)
# Removing BT2A3_HUMAN SEPP1_HUMAN from each dataframe and saving in in the same variable again:
Mitosis_Ctrl_clean <- Mitosis_Ctrl_clean[!(rownames(Mitosis_Ctrl_clean) %in% c("BT2A3_HUMAN", "SEPP1_HUMAN")), ]
Mitosis_RNase_clean <- Mitosis_RNase_clean[!(rownames(Mitosis_RNase_clean) %in% c("BT2A3_HUMAN", "SEPP1_HUMAN")), ]
#First finding the mean of all three replicates for every fraction separately in our Mitosis_Ctrl_clean data:
Mitosis_Ctrl_mean = as.data.frame(
sapply(seq(0,72,3), function(i) { #outer loop to repeatedly select the three replicates for each fraction
apply(Mitosis_Ctrl_clean[,c(1,2,3)+c(i,i,i)], 1, function(x) {mean(x)})
#inner loop which calculates the mean for the three replicates, for each row anew. and CAUTION: if we delete some rows, we might have to adjust the name of the dataframe.
}))
#To have logical new column names, it is possible to paste the fraction number and add Ctrl_Mean separately to each new column name. The sequence goes from 1 to 25 in steps of one.
colnames(Mitosis_Ctrl_mean) = paste("Fraction",seq(1,25,1),"_Ctrl_Mean",sep="")
head(Mitosis_Ctrl_mean)
Mitosis_Ctrl_100 <- as.data.frame(sapply(Mitosis_Ctrl_mean, function(i){(i/apply(Mitosis_Ctrl_mean,1,sum))*100}))
head(Mitosis_Ctrl_100)
#First finding mean:
Mitosis_RNase_mean = as.data.frame(
sapply(seq(0,72,3), function(i) {
apply(Mitosis_RNase_clean[,c(1,2,3)+c(i,i,i)], 1, function(x) {mean(x)})
}))
colnames(Mitosis_RNase_mean) = paste("Fraction",seq(1,25,1),"_RNase_Mean",sep="")
#Now scaling
Mitosis_RNase_100 <- as.data.frame(sapply(Mitosis_RNase_mean, function(i){(i/apply(Mitosis_RNase_mean,1,sum))*100}))
head(Mitosis_RNase_100)
# Clean up the environment of variables not used later to maintain an overview
rm(nonzero_rows, column_values,max_values_Ctrl,max_values_RNase,p_values_Ctrl,p_values_RNase,RDeeP_HeLa_Mitosis_p,bad_proteins10,num_sets,p_values,protein1_Ctrl_frac1,protein8_Ctrl_frac1,bad_proteins5,i,RDeeP_HeLa_Mitosis_Ctrl,RDeeP_HeLa_Mitosis_RNase)
# Step 1: Extract the row you want to find peaks in
row_index <- 6  # Adjust the row index as needed
row_name <- row.names(Mitosis_Ctrl_100)[row_index] #name of plot adapts depending on protein viewed
# Step 2: Extrakt the data for Ctrl and RNase
row_data_Ctrl <- Mitosis_Ctrl_100[row_index, ]
row_data_RNase <- Mitosis_RNase_100[row_index, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_index, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_index, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Step 1: Select a specific row by name
row_name <- "2A5E_HUMAN" #EXAMPLE PROTEINS: ABCA1_HUMAN (precipitated protein, but still shifter), ABT1_HUMAN (right shifter), ABCF1_HUMAN and RBM3_HUMAN (left shifters), SQOR_HUMAN (local shifter)
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_100[row_name, ]
row_data_RNase <- Mitosis_RNase_100[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
#as.vector(Ctrl_fraction_max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_RNase_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_RNase_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_RNase_100)
# Create a dataframe with the results
RNase_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
RNase_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
# Shows protein name, fraction where global maxima was found and the maximum value
print(RNase_fraction_max_value)
print(RNase_fraction_max)
#Results as vector
#as.vector(RNase_fraction_max)
# Subtract the values and determine the shift
shift_result <- Ctrl_fraction_max - RNase_fraction_max
#Code which would only assign a shift of 0 to no shift
#shift_result <- ifelse(shift_result == 0, "no shift", ifelse(shift_result > 0, "left shift", "right shift"))
# Code which would assign a shift of 1 or less to "no shift": *HERE THE NUMBER CAN BE CHANGED!*
shift_result <- ifelse((shift_result >= -1) & (shift_result <= 1), "no shift", ifelse(shift_result > 1, "left shift", "right shift"))
# Create a new dataframe with the shift result and row names
shift_dataframe <- data.frame(Shift = shift_result, row.names = row.names(Ctrl_fraction_max))
colnames(shift_dataframe)[1] <- "Shift"
# Print the new dataframe
print(shift_dataframe)
shift_dataframe["RBM3_HUMAN",] #RBM3 is a sure right shifter, as a check for the method
# Count the number of left shifts
sum(shift_dataframe$Shift == "left shift")
sum(shift_dataframe$Shift == "right shift")
sum(shift_dataframe$Shift == "no shift")
sum(shift_dataframe$Shift == "left shift") + sum(shift_dataframe$Shift == "right shift")
max_shift <- Ctrl_fraction_max - RNase_fraction_max
# select proteins which have 0:
max_shift_0 <- max_shift[max_shift$Fraction == 0, , drop = FALSE]
calculate_maxima_diff <- function(row_name, Mitosis_Ctrl_100, Mitosis_RNase_100, max_shift_0) {
if (row_name %in% rownames(max_shift_0)) {
row_data_Ctrl <- Mitosis_Ctrl_100[row_name, ]
row_data_RNase <- Mitosis_RNase_100[row_name, ]
row_global_max_Ctrl <- max(row_data_Ctrl)
row_global_max_RNase <- max(row_data_RNase)
lower_bound <- row_global_max_Ctrl * 0.8
upper_bound <- row_global_max_Ctrl * 1.2
y_rbp <- if (row_global_max_RNase >= lower_bound && row_global_max_RNase <= upper_bound) {
"Non RBP"
} else {
"RBP"
}
return(y_rbp)
} else {
return(NULL)  # Return NULL for rows not found in max_shift_0
}
}
row_names <- rownames(max_shift_0)
results <- sapply(row_names, calculate_maxima_diff, Mitosis_Ctrl_100, Mitosis_RNase_100, max_shift_0)
y_max_subset <- data.frame(ProteinType = results)
# Print the final dataframe
y_max_subset
sum(y_max_subset$ProteinType == 'RBP') #503 additional partial shifters identified!!
# Create an empty vector to store the results
results <- vector("logical", nrow(Mitosis_Ctrl_100))
# Iterate over each row
for (i in 1:nrow(Mitosis_Ctrl_100)) {
# Get the row data for Ctrl and RNase
row_data_Ctrl <- Mitosis_Ctrl_100[i, ]
row_data_RNase <- Mitosis_RNase_100[i, ]
# Find the peaks in the row data for Ctrl
peaks_Ctrl <- c()
for (j in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[j] > row_data_Ctrl[j-1] && row_data_Ctrl[j] > row_data_Ctrl[j+1]) {
peaks_Ctrl <- c(peaks_Ctrl, j)
}
}
# Find the peaks in the row data for RNase
peaks_RNase <- c()
for (j in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[j] > row_data_RNase[j-1] && row_data_RNase[j] > row_data_RNase[j+1]) {
peaks_RNase <- c(peaks_RNase, j)
}
}
# Compare the peaks between Ctrl and RNase
if (identical(peaks_Ctrl, peaks_RNase)) {
results[i] <- TRUE
} else {
results[i] <- FALSE
}
}
# Create a data frame with the results
identical_fractions <- data.frame(no_shift = results, row.names = row.names(Mitosis_Ctrl_100))
# Print the identical_fractions dataframe
print(identical_fractions)
identical_fractions["SQOR_HUMAN",] #-> FALSE, thus this protein is rightly identified as a shifter
sum(identical_fractions$no_shift == FALSE) #-> 1570 proteins are identified as shifters
# Create an empty vector to store the results
results <- vector("integer", nrow(Mitosis_Ctrl_100))
# Iterate over each row
for (i in 1:nrow(Mitosis_Ctrl_100)) {
# Get the row data for Ctrl and RNase
row_data_Ctrl <- Mitosis_Ctrl_100[i, ]
row_data_RNase <- Mitosis_RNase_100[i, ]
# Find the peaks in the row data for Ctrl
peaks_Ctrl <- c()
for (j in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[j] > row_data_Ctrl[j-1] && row_data_Ctrl[j] > row_data_Ctrl[j+1]) {
peaks_Ctrl <- c(peaks_Ctrl, j)
}
}
# Find the peaks in the row data for RNase
peaks_RNase <- c()
for (j in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[j] > row_data_RNase[j-1] && row_data_RNase[j] > row_data_RNase[j+1]) {
peaks_RNase <- c(peaks_RNase, j)
}
}
# Calculate the difference in peak counts
diff_peaks <- length(peaks_RNase) - length(peaks_Ctrl)
# Store the difference in the results vector
results[i] <- diff_peaks
#Compare the peaks between Ctrl and RNase
if (diff_peaks == 0 && !identical(peaks_Ctrl, peaks_RNase)) {
results[i] <- 1
} else {
NULL
}
}
# Create a data frame with the results
identical_fractions2 <- data.frame(local_shift = results, row.names = row.names(Mitosis_Ctrl_100))
# Print the identical_fractions dataframe
print(identical_fractions2)
# Count the number of entries not equal to zero in the no_shift column
sum(identical_fractions2$local_shift != 0)
# Calculate the curve quotients using vectorized operations
curve_quotients <- (Mitosis_Ctrl_100+1) / (Mitosis_RNase_100+1)
# Set the row names of curve_quotients
row.names(curve_quotients) <- row.names(Mitosis_Ctrl_100)
# Print the curve_quotients dataframe
print(curve_quotients)
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.7)) | row > 1.7)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Calculate the minimum and maximum values for each row in curve_quotients
quotients_minmax <- data.frame("Min" = apply(curve_quotients, 1, min), "Max" = apply(curve_quotients, 1, max), row.names = row.names(curve_quotients))
# Print the quotients_minmax dataframe
print(quotients_minmax)
comparison_RBP = read.csv("https://www.dropbox.com/s/xpjob8g8flxl3ik/Table_HS_RBP.txt?dl=1", sep = "", header = T, row.names = 1)
comparison_RBP = read.csv("https://www.dropbox.com/s/xpjob8g8flxl3ik/Table_HS_RBP.txt?dl=1", sep = "", header = T, row.names = 1)
#generate a dataframe that holds the nummeric data of the shift. Dataframe has to have 2 dimension: RNase fraction and control fraction
maximum_fraction <- data.frame(Ctrl_fraction_max, RNase_fraction_max)
colnames(maximum_fraction) <- c("Ctrl_fraction_max", "RNase_fraction_max")
show(maximum_fraction)
plot(maximum_fraction, main = "comparison of maxima")
#Calculate optimal number of cluster
fviz_nbclust(maximum_fraction, kmeans, method='silhouette') #optimal number of cluster = 2
#fviz_nbclust(maximum_fraction, kmeans, method='wss')        #optimal number of cluster = 2
#fviz_nbclust(maximum_fraction, kmeans, method='gap_stat')   #optimal number of cluster = 6
#then a k-means clustering with the optimal amount of cluster and interpretation
km <- kmeans(maximum_fraction, centers = 2, nstart = 25)
#visualizing the result of kmeans
fviz_cluster(km, data = maximum_fraction)
# Create a data frame with clustered data and cluster labels
clustered_data1 <- data.frame(maximum_fraction, cluster = as.factor(km$cluster))
show(clustered_data1)
# Create a scatter plot using ggplot
dotplot1 <- ggplot(clustered_data1, aes(x = Ctrl_fraction_max, y = RNase_fraction_max, color = cluster)) +
geom_point() +
labs(title = "K-means Clustering for maxima",
x = "Ctrl_fraction_max",
y = "RNase_fraction_max",
color = "Cluster")
plot(dotplot1)
#kmeans with same data but 3 cluster
km3 <- kmeans(maximum_fraction, centers = 3, nstart = 25)
#fviz_cluster(km3, data = maximum_fraction)
# Create a data frame with clustered data and cluster labels
clustered_data2 <- data.frame(maximum_fraction, cluster = as.factor(km3$cluster))
show(clustered_data2)
# Create a scatter plot using ggplot
dotplot2 <- ggplot(clustered_data2, aes(x = Ctrl_fraction_max, y = RNase_fraction_max, color = cluster)) +
geom_point() +
labs(title = "K-means Clustering for maxima",
x = "Ctrl_fraction_max",
y = "RNase_fraction_max",
color = "Cluster")
plot(dotplot2)
#here we don´t need to generate a new dataframe since we already have one we can work with
show(quotients_minmax)
#Calculate optimal number of cluster
fviz_nbclust(quotients_minmax, kmeans, method='silhouette') #optimal number of cluster = 2
#then a k-means clustering with the optimal amount of cluster and interpretation
km_q <- kmeans(quotients_minmax, centers = 2, nstart = 25)
#visualizing the result of kmeans
km_q
#fviz_cluster(km_q, data = quotients_minmax)
# Create a data frame with clustered data and cluster labels
clustered_data3 <- data.frame(quotients_minmax, cluster = as.factor(km_q$cluster))
show(clustered_data3)
# Create a scatter plot using ggplot
dotplot3 <- ggplot(clustered_data3, aes(x = Min, y = Max, color = cluster)) +
geom_point() +
labs(title = "K-means Clustering for curve",
x = "Min",
y = "Max",
color = "Cluster")
plot(dotplot3)
max_shift <- Ctrl_fraction_max - RNase_fraction_max
# Create shift_comparison dataframe
shift_comparison <- data.frame(max_shift = max_shift,
local_shift = identical_fractions2,
curve_shift = quotients_minmax$Max,
row.names = row.names(max_shift))
colnames(shift_comparison)[1] <- "max_shift"
# Print the shift_comparison dataframe
print(shift_comparison)
# Initialize variables to store the best linear relationship found
best_correlation <- 0
best_fit <- NULL
best_col1_name <- ""
best_col2_name <- ""
# Loop through all possible pairs of columns in the dataframe
for (i in 1:(ncol(shift_comparison) - 1)) {
for (j in (i + 1):ncol(shift_comparison)) {
# Extract the two columns
col1 <- shift_comparison[, i]
col2 <- shift_comparison[, j]
# Calculate the Pearson correlation coefficient
correlation <- cor(col1, col2, use = "pairwise.complete.obs")
# Check if the correlation is stronger than the previous best
if (abs(correlation) > abs(best_correlation)) {
best_correlation <- correlation
best_col1_name <- names(shift_comparison)[i]
best_col2_name <- names(shift_comparison)[j]
}
}
}
# Print the columns with the best linear relationship found
cat("Columns with the highest correlation were:", best_col1_name, "and", best_col2_name, "\n")
# Perform linear regression on the columns with the best linear relationship
model <- lm(shift_comparison[[best_col2_name]] ~ shift_comparison[[best_col1_name]])
# Print the regression summary
summary(model)
summary(model)$r.squared
# Create a data frame with the two columns
data <- data.frame(x = shift_comparison[[best_col1_name]], y = shift_comparison[[best_col2_name]])
# Create a scatter plot with regression line
ggplot(data, aes(x = x, y = y)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "blue") +
labs(title = "Linear Regression", x = best_col1_name, y = best_col2_name)
# Calculate RMSE
predicted <- as.numeric(fitted(model))
column1 <- data$x
column2 <- data$y
rmse <- rmse(predicted, c(column1, column2))
cat("The Root Mean Square Error is ", rmse, "\n")
residuals <- rstandard(model)
# Create a QQ plot
qqplot(qnorm(ppoints(length(residuals))), residuals,
xlab = "Theoretical Quantiles",
ylab = "Standardized Residuals",
main = "QQ Plot of Linear Model")
abline(a = 0, b = 1, col = "blue", lwd = 2)
