if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Step 1: Extract the row you want to find peaks in
row_index <- 20  # Adjust the row index as needed
row_name <- row.names(Mitosis_Ctrl_100)[row_index] #name of plot adapts depending on protein viewed #also works if Mitosis_RNase_100, bc both dataframes would plot the same protein
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_100[row_index, ]
row_data_RNase <- Mitosis_RNase_100[row_index, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_index, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_index, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Select a specific row by name
row_name <- "3BP5_HUMAN"
# Step 1: Find the desired row by the name
row_data <- Mitosis_Ctrl_100[Mitosis_Ctrl_100$Row_Name == row_name, -1]  # Exclude the first column (row names)
# Step 2: Find the peaks for Ctrl in the row data
row_data_Ctrl <- Mitosis_Ctrl_100[row_name, ]
row_data_RNase <- Mitosis_RNase_100[row_name, ]
# Step 3: Find the peaks in the row data
peaks_Ctrl <- c()
for (i in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[i] > row_data_Ctrl[i-1] && row_data_Ctrl[i] > row_data_Ctrl[i+1]) {
peaks_Ctrl <- c(peaks_Ctrl, i)
}
}
peaks_RNase <- c()
for (i in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[i] > row_data_RNase[i-1] && row_data_RNase[i] > row_data_RNase[i+1]) {
peaks_RNase <- c(peaks_RNase, i)
}
}
# Step 4: Visualize the peaks on a plot
plot(1:25, Mitosis_Ctrl_100[row_name, ], type = "l", col="blue", xlab = "Fractions", ylab = "Relative Protein amount",ylim=c(0,60), main = row_name)
points(peaks_Ctrl, row_data_Ctrl[peaks_Ctrl], col = "blue", pch = 16)
lines(1:25, Mitosis_RNase_100[row_name, ], type="l",col="red")
points(peaks_RNase, row_data_RNase[peaks_RNase], col = "red", pch = 16)
grid()
legend("topright",legend=c("Control","RNase"),col=c("blue","red"),bg="white",lwd=2)
# Step 5: Print the row indices with multiple peaks
length(rows_with_multiple_peaks)
View(rows_with_multiple_peaks)
as.dataframe(rows_with_multiple_peaks)
as.data.frame(rows_with_multiple_peaks)
c(rows_with_multiple_peaks)
as.data.frame(rows_with_multiple_peaks)
as.data.frame(rows_with_multiple_peaks, Row_Name = rownames(Mitosis_Ctrl_100))
as.data.frame(rows_with_multiple_peaks, Row_Name = rownames(Mitosis_Ctrl_100))
rows_with_multiple_peaks_df = data.frame(Row_Name = rownames(Mitosis_Ctrl_100), value = rows_with_multiple_peaks)
rows_with_multiple_peaks
rows_with_multiple_peaks_df = data.frame(Row_Name = rownames(Mitosis_Ctrl_100), value = rows_with_multiple_peak
rows_with_multiple_peaks_df = data.frame(Row_Name = rownames(Mitosis_Ctrl_100), value = rows_with_multiple_peaks)
rows_with_multiple_peaks_df <- data.frame(Row_Name = rownames(Mitosis_Ctrl_100), value = rows_with_multiple_peaks)
rownames(Mitosis_Ctrl_100)
rownames(Mitosis_Ctrl_100 %in% rows_with_multiple_peaks)
rownames(Mitosis_Ctrl_100 %in% rows_with_multiple_peaks)
# Step 1: Create an empty vector to store the row indices with multiple peaks
rows_with_one_peak <- c()
# Step 2: Iterate over all rows in the dataframe
for (row_index in 1:nrow(Mitosis_Ctrl_100)) {
row_data <- Mitosis_Ctrl_100[row_index, ]
# Step 3: Find the peaks in the row data
peaks <- c()
for (i in 2:(length(row_data) - 1)) {
if (row_data[i] > row_data[i-1] && row_data[i] > row_data[i+1]) {
peaks <- c(peaks, i)
}
}
# Step 4: Check if the row has multiple peaks
if (length(peaks) > 1) {
rows_with_one_peak <- c(rows_with_one_peak, row_index)
}
}
# Step 5: Print the row indices with multiple peaks
length(rows_with_one_peak) #this is already a vector
rows_with_one_peak
#RDeeP_HeLa_Mitosis_RNase=RDeeP_HeLa_Mitosis[,-which(names(RDeeP_HeLa_Mitosis) %in% colnames(RDeeP_HeLa_Mitosis_Ctrl))]
# Step 1: Create an empty vector to store the row indices with multiple peaks
rows_with_multiple_peaks <- c()
# Step 2: Iterate over all rows in the dataframe
for (row_index in 1:nrow(Mitosis_Ctrl_100)) {
row_data <- Mitosis_Ctrl_100[row_index, ]
# Step 3: Find the peaks in the row data
peaks <- c()
for (i in 2:(length(row_data) - 1)) {
if (row_data[i] > row_data[i-1] && row_data[i] > row_data[i+1]) {
peaks <- c(peaks, i)
}
}
# Step 4: Check if the row has multiple peaks
if (length(peaks) > 1) {
rows_with_multiple_peaks <- c(rows_with_multiple_peaks, row_index)
}
}
# Step 5: Print the row indices with multiple peaks
length(rows_with_multiple_peaks) #this is already a vector
rows_with_multiple_peaks
rows_with_multiple_peaks_df <- data.frame(Row_Name = rownames(Mitosis_Ctrl_100), value = rows_with_multiple_peaks)
# Step 1: Create an empty vector to store the row indices with multiple peaks
rows_with_one_peak <- c()
# Step 2: Iterate over all rows in the dataframe
for (row_index in 1:nrow(Mitosis_Ctrl_100)) {
row_data_onepeak <- Mitosis_Ctrl_100[row_index, ]
# Step 3: Find the peaks in the row data
peaks <- c()
for (i in 2:(length(row_data) - 1)) {
if (row_data_onepeak[i] > row_data_onepeak[i-1] && row_data_onepeak[i] > row_data_onepeak[i+1]) {
peaks <- c(peaks, i)
}
}
# Step 4: Check if the row has multiple peaks
if (length(peaks) > 1) {
rows_with_one_peak <- c(rows_with_one_peak, row_index)
}
}
# Step 5: Print the row indices with multiple peaks
length(rows_with_one_peak) #this is already a vector
rows_with_one_peak
#RDeeP_HeLa_Mitosis_RNase=RDeeP_HeLa_Mitosis[,-which(names(RDeeP_HeLa_Mitosis) %in% colnames(RDeeP_HeLa_Mitosis_Ctrl))]
# Initialize an empty vector to store row numbers
rows_with_one_peak <- c()
# Iterate over each row in the dataframe
for (i in 1:nrow(Mitosis_Ctrl_100)) {
row <- Mitosis_Ctrl_100[i, ]
max_count <- sum(row == max(row))
# Check if the row has a single global maximum
if (max_count == 1) {
rows_with_one_peak <- c(rows_with_one_peak, i)
}
}
# Print the vector
print(rows_with_one_peak)
# Function to check for rows with a single global maximum
check_single_max <- function(row) {
max_count <- sum(row == max(row))
if (max_count == 1) {
return(TRUE)
} else {
return(FALSE)
}
}
# Apply the function to each row of the dataframe
row_vector <- which(apply(df, 1, check_single_max))
# Function to check for rows with a single global maximum
check_single_max <- function(row) {
max_count <- sum(row == max(row))
if (max_count == 1) {
return(TRUE)
} else {
return(FALSE)
}
}
# Apply the function to each row of the dataframe
row_vector <- which(apply(Mitosis_Ctrl_100, 1, check_single_max))
# Print the vector
print(row_vector)
# Initialize an empty vector to store row numbers
row_vector <- c()
# Iterate over each row in the dataframe
for (i in 1:nrow(Mitosis_Ctrl_100)) {
row <- Mitosis_Ctrl_100[i, ]
# Check for a single global maximum and no local maxima
max_val <- max(row)
local_maxima <- row[-c(1, length(row))] < row[-c(length(row), 1)]
if (sum(row == max_val) == 1 && sum(local_maxima) == 0) {
row_vector <- c(row_vector, i)
}
}
# Print the vector
print(row_vector)
# Step 1: Create an empty vector to store the row indices with multiple peaks
rows_with_multiple_peaks <- c()
# Step 2: Iterate over all rows in the dataframe
for (row_index in 1:nrow(Mitosis_Ctrl_100)) {
row_data <- Mitosis_Ctrl_100[row_index, ]
# Step 3: Find the peaks in the row data
peaks <- c()
for (i in 2:(length(row_data) - 1)) {
if (row_data[i] > row_data[i-1] && row_data[i] > row_data[i+1]) {
peaks <- c(peaks, i)
}
}
# Step 4: Check if the row has multiple peaks
if (length(peaks) > 1) {
rows_with_multiple_peaks <- c(rows_with_multiple_peaks, row_index)
}
}
# Step 5: Print the row indices with multiple peaks
length(rows_with_multiple_peaks) #this is already a vector
rows_with_multiple_peaks
#rows_with_multiple_peaks_df <- data.frame(Row_Name = rownames(Mitosis_Ctrl_100), value = rows_with_multiple_peaks)
#rows_with_multiple_peaks_df
#rownames(Mitosis_Ctrl_100 %in% rows_with_multiple_peaks)
rows_with_multiple_peaks <- c()
# Step 2: Iterate over all rows in the dataframe
for (rownames(Mitosis_Ctrl_100) in 1:nrow(Mitosis_Ctrl_100)) {
rows_with_multiple_peaks <- c()
# Step 2: Iterate over all rows in the dataframe
for rownames(Mitosis_Ctrl_100) in 1:nrow(Mitosis_Ctrl_100)) {
# Iterate over each row in the dataframe
for (row_index in 1:nrow(Mitosis_Ctrl_100)) {
# Extract the row
row <- Mitosis_Ctrl_100[row_index, ]
# Find the global maximum in the row
global_max <- max(row)
# Check if the row has only one peak
has_one_peak <- sum(row == global_max) == 1 && all(diff(row) < 0)
# Print the result for the current row
print(paste("Row", row_index, "has one peak:", has_one_peak))
}
View(Mitosis_RNase_100)
knitr::opts_chunk$set(echo = TRUE)
# Example dataframe
df <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6),
C = c(7, 8, 9)
)
# Row index for which to find the global maximum
row_index <- 2
# Extract the row from the dataframe
row <- df[row_index, ]
# Find the global maximum in the row
global_max <- max(row)
# Print the global maximum
print(global_max)
# Example dataframe
df <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6),
C = c(7, 8, 9)
)
# Row index for which to find the global maximum
row_index <- 2
# Extract the row from the dataframe
row <- df[row_index, ]
# Find the global maximum in the row
global_max <- max(row)
# Find the row name
row_name <- row.names(df)[row_index]
# Print the row name and global maximum
print(paste("Row Name:", row_name))
print(paste("Global Maximum:", global_max))
# Example dataframe
df <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6),
C = c(7, 8, 9)
)
# Row index for which to find the global maximum
row_index <- 2
# Extract the row from the dataframe
row <- df[row_index, ]
# Find the column index of the global maximum
column_index <- which.max(row)
# Find the global maximum in the row
global_max <- max(row)
# Find the row name
row_name <- row.names(df)[row_index]
# Print the row name, column index, and global maximum
print(paste("Row Name:", row_name))
print(paste("Column Index of Global Maximum:", column_index))
print(paste("Global Maximum:", global_max))
# Example dataframe
df <- data.frame(
A = c(1, 2, 3),
B = c(4, 5, 6),
C = c(7, 8, 9)
)
# Find the column index of the global maximum for each row
column_indices <- apply(df, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(df, 1, max)
# Find the row names
row_names <- row.names(df)
# Create a dataframe with the results
results_df <- data.frame(RowName = row_names, ColumnIndex = column_indices, GlobalMax = global_maxima)
# Print the results
print(results_df)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
results_df <- data.frame(RowName = row_names, ColumnIndex = column_indices, GlobalMax = global_maxima)
# Print the results
print(results_df)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
results_df <- data.frame(ColumnIndex = column_indices, GlobalMax = global_maxima)
# Print the results
print(results_df)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
results_df <- data.frame(Fraction = column_indices, Global Max = global_maxima)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
results_df <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
# Print the results
print(results_df)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
results_df <- data.frame(Fraction = column_indices)
# Print the results
print(results_df)
as.vector(results_df)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
results_df <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
# Print the results
print(results_df)
as.vector(results_df)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_RNase_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_RNase_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_RNase_100)
# Create a dataframe with the results
results_df <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(results_df)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_RNase_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_RNase_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_RNase_100)
# Create a dataframe with the results
results_df <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
results_df <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(results_df)
#Results as vector
as.vector(results_df) #just numbers (aka fractions where max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
as.vector(Ctrl_Fraction_Max_Value) #just numbers (aka fractions where max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
as.vector(Ctrl_fraction_max_value) #just numbers (aka fractions where max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
as.vector(Ctrl_fraction_max) #just numbers (aka fractions where max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_RNase_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_RNase_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_RNase_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_RNase_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_RNase_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_RNase_100)
# Create a dataframe with the results
RNase_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
as.vector(Ctrl_fraction_max) -as.vector(Ctrl_fraction_max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
as.vector(Ctrl_fraction_max) #just numbers (aka fractions where max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
as.vector(Ctrl_fraction_max) #just numbers (aka fractions where max)
as.vector(Ctrl_fraction_max) -as.vector(Ctrl_fraction_max)
as.vector(Ctrl_fraction_max) - as.vector(Ctrl_fraction_max)
# Find the column index of the global maximum for each row
column_indices <- apply(Mitosis_Ctrl_100, 1, which.max)
# Find the global maximum for each row
global_maxima <- apply(Mitosis_Ctrl_100, 1, max)
# Find the row names
row_names <- row.names(Mitosis_Ctrl_100)
# Create a dataframe with the results
Ctrl_fraction_max_value <- data.frame(Fraction = column_indices, MaxValue = global_maxima)
Ctrl_fraction_max <- data.frame(Fraction = column_indices)
# Print the results
#Shows protein name, fraction where global maxima was found and the maximum value
print(Ctrl_fraction_max_value)
print(Ctrl_fraction_max)
#Results as vector
as.vector(Ctrl_fraction_max) #just numbers (aka fractions where max)
as.vector(Ctrl_fraction_max) - as.vector(Ctrl_fraction_max)
