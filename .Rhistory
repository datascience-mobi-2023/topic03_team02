shifter_avg <- shifter_sum / shifter_rows
not_shifter_avg <- not_shifter_sum / not_shifter_rows
# Print the sums and division results
cat("Sum of fifth column values for rows with 'shifter' result in shifting_quotients:", shifter_sum, "\n")
cat("Number of rows meeting the 'shifter' criteria:", shifter_rows, "\n")
cat("Average of fifth column values for rows with 'shifter' result in shifting_quotients:", shifter_avg, "\n")
cat("\n")
cat("Sum of fifth column values for rows with 'not shifter' result in shifting_quotients:", not_shifter_sum, "\n")
cat("Number of rows meeting the 'not shifter' criteria:", not_shifter_rows, "\n")
cat("Average of fifth column values for rows with 'not shifter' result in shifting_quotients:", not_shifter_avg, "\n")
View(comparison_non_RBP)
View(comparison_RBP)
View(comparison_non_RBP)
# Get the row names that meet the criteria in shift_comparison_RBP2go
selected_rows <- rownames(shift_comparison_RBP2go)[shift_comparison_RBP2go[, 1] != 0 & shift_comparison_RBP2go[, 1] != 1 & shift_comparison_RBP2go[, 1] != -1]
# Check which selected rows are not found in comparison_RBP
not_found_rows <- sum(!(selected_rows %in% rownames(comparison_RBP)))
# Print the number of rows not found in comparison_RBP
cat("Number of rows meeting the criteria but not found in comparison_RBP:", not_found_rows, "\n")
# Get the row names that meet the criteria in shift_comparison_RBP2go
selected_rows <- rownames(shift_comparison_RBP2go)[rownames(shift_comparison_RBP2go) %in% rownames(shifting_quotients) & shifting_quotients[, "Curve_shifters"] == "shifter"]
# Check which selected rows are not found in shifting_quotients
not_found_rows <- sum(!(selected_rows %in% rownames(shifting_quotients)))
# Print the number of rows not found in shifting_quotients
cat("Number of rows meeting the criteria but not found in shifting_quotients:", not_found_rows, "\n")
# Get the row names that meet the criteria in shift_comparison_RBP2go
selected_rows <- rownames(shift_comparison_RBP2go)[rownames(shift_comparison_RBP2go) %in% rownames(shifting_quotients) & shifting_quotients[, "Curve_shifters"] == "shifter"]
# Check which selected rows are not found in shifting_quotients
not_found_rows <- sum((selected_rows %in% rownames(shifting_quotients)))
# Print the number of rows not found in shifting_quotients
cat("Number of rows meeting the criteria but not found in shifting_quotients:", not_found_rows, "\n")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.4)) | row > 1.4)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.5)) | row > 1.5)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.6)) | row > 1.6)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.7)) | row > 1.7)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
# Create a function to perform z-test for each value
perform_z_test <- function(value) {
z_score <- (value - 1) / sd_value  # Calculate the z-score
if (abs(z_score) > #1.96) {  # Assuming 95% confidence interval. If the absolute value of the z-score is greater than 1.96, it indicates that the value significantly differs from the expectation value.
1.645) {  # Assuming 90% confidence interval. The bigger the confidence interval, the more proteins are identified as shifters.
return("shifter")
} else {
return("no shifter")
}
}
# Calculate the standard deviation across the entire dataframe
sd_value <- sd(as.matrix(curve_quotients)) #shifter abhängig auch von der sd, hier über den gesamten Datensatz eine sd von 0.361562, je kleiner, desto näher nimmt man an sind die Werte aneinander, je größer, desto weiter entfernt.
# Apply the z-test function to each value in the dataframe
quotients_using_z <- apply(curve_quotients, 1, function(row) {
result <- sapply(row, perform_z_test)
if ("shifter" %in% result) {
return("shifter")
} else {
return("no shifter")
}
})
quotients_using_z <- data.frame(quotients_using_z)
colnames(quotients_using_z) <- "Result"
# Print the count of "shifter" values
table(quotients_using_z$Result)["shifter"]
# Get the row names of the "shifters" in quotients_using_z
shifter_rows <- rownames(quotients_using_z)[quotients_using_z$Result == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in quotients_using_z not found in comparison_RBP:", not_found_rows, "\n")
# Calculate the sums based on conditions
non_zero_sum <- sum(shift_comparison_RBP2go[, 5][shift_comparison_RBP2go[, 1] != 0 & shift_comparison_RBP2go[, 1] != 1 & shift_comparison_RBP2go[, 1] != -1], na.rm = TRUE)
other_sum <- sum(shift_comparison_RBP2go[, 5][shift_comparison_RBP2go[, 1] == 0 | shift_comparison_RBP2go[, 1] == 1 | shift_comparison_RBP2go[, 1] == -1], na.rm = TRUE)
# Count the number of rows meeting the specific criteria
non_zero_rows <- sum(shift_comparison_RBP2go[, 1] != 0 & shift_comparison_RBP2go[, 1] != 1 & shift_comparison_RBP2go[, 1] != -1)
other_rows <- sum(shift_comparison_RBP2go[, 1] == 0 | shift_comparison_RBP2go[, 1] == 1 | shift_comparison_RBP2go[, 1] == -1)
# Calculate the division
non_zero_avg <- non_zero_sum / non_zero_rows
other_avg <- other_sum / other_rows
# Print the sums and division results
cat("Sum of fifth column values when first column is not equal to zero, one, or minus one:", non_zero_sum, "\n")
cat("Number of rows meeting the specific criteria:", non_zero_rows, "\n")
cat("Average of fifth column values when first column is not equal to zero, one, or minus one:", non_zero_avg, "\n")
cat("\n")
cat("Sum of fifth column values when first column is equal to zero, one, or minus one:", other_sum, "\n")
cat("Number of rows meeting the specific criteria:", other_rows, "\n")
cat("Average of fifth column values when first column is equal to zero, one, or minus one:", other_avg, "\n")
# Calculate the sums based on conditions
shifter_sum <- sum(shift_comparison_RBP2go[, 5][rownames(shift_comparison_RBP2go) %in% rownames(shifting_quotients) & shifting_quotients[, "Curve_shifters"] == "shifter"], na.rm = TRUE)
not_shifter_sum <- sum(shift_comparison_RBP2go[, 5][rownames(shift_comparison_RBP2go) %in% rownames(shifting_quotients) & shifting_quotients[, "Curve_shifters"] != "shifter"], na.rm = TRUE)
# Count the number of rows meeting the specific criteria
shifter_rows <- sum(rownames(shift_comparison_RBP2go) %in% rownames(shifting_quotients) & shifting_quotients[, "Curve_shifters"] == "shifter")
not_shifter_rows <- sum(rownames(shift_comparison_RBP2go) %in% rownames(shifting_quotients) & shifting_quotients[, "Curve_shifters"] != "shifter")
# Calculate the division
shifter_avg <- shifter_sum / shifter_rows
not_shifter_avg <- not_shifter_sum / not_shifter_rows
# Print the sums and division results
cat("Sum of fifth column values for rows with 'shifter' result in shifting_quotients:", shifter_sum, "\n")
cat("Number of rows meeting the 'shifter' criteria:", shifter_rows, "\n")
cat("Average of fifth column values for rows with 'shifter' result in shifting_quotients:", shifter_avg, "\n")
cat("\n")
cat("Sum of fifth column values for rows with 'not shifter' result in shifting_quotients:", not_shifter_sum, "\n")
cat("Number of rows meeting the 'not shifter' criteria:", not_shifter_rows, "\n")
cat("Average of fifth column values for rows with 'not shifter' result in shifting_quotients:", not_shifter_avg, "\n")
# Get the row names that meet the criteria in shift_comparison_RBP2go
selected_rows <- rownames(shift_comparison_RBP2go)[shift_comparison_RBP2go[, 1] != 0 & shift_comparison_RBP2go[, 1] != 1 & shift_comparison_RBP2go[, 1] != -1]
# Check which selected rows are not found in comparison_RBP
not_found_rows <- sum(!(selected_rows %in% rownames(comparison_RBP)))
# Print the number of rows not found in comparison_RBP
cat("Number of rows meeting the criteria but not found in comparison_RBP:", not_found_rows, "\n")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
# Get the row names that meet the criteria in shift_comparison_RBP2go
selected_rows <- rownames(shift_comparison_RBP2go)[shift_comparison_RBP2go[, 1] != 0 & shift_comparison_RBP2go[, 1] != 1 & shift_comparison_RBP2go[, 1] != -1]
# Check which selected rows are not found in comparison_RBP
not_found_rows <- sum(!(selected_rows %in% rownames(comparison_RBP)))
# Print the number of rows not found in comparison_RBP
cat("Number of rows meeting the criteria but not found in comparison_RBP:", not_found_rows, "\n")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
View(shifting_quotients)
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.3)) | row > 1.3)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.7)) | row > 1.7)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Get the row names of the "shifters" in shifting_quotients
shifter_rows <- rownames(shifting_quotients)[shifting_quotients$Curve_shifters == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in shifting_quotients not found in comparison_RBP:", not_found_rows, "\n")
# Create a function to perform z-test for each value
perform_z_test <- function(value) {
z_score <- (value - 1) / sd_value  # Calculate the z-score
if (abs(z_score) > #1.96) {  # Assuming 95% confidence interval. If the absolute value of the z-score is greater than 1.96, it indicates that the value significantly differs from the expectation value.
1.645) {  # Assuming 90% confidence interval. The bigger the confidence interval, the more proteins are identified as shifters.
return("shifter")
} else {
return("no shifter")
}
}
# Calculate the standard deviation across the entire dataframe
sd_value <- sd(as.matrix(curve_quotients)) #shifter abhängig auch von der sd, hier über den gesamten Datensatz eine sd von 0.361562, je kleiner, desto näher nimmt man an sind die Werte aneinander, je größer, desto weiter entfernt.
# Apply the z-test function to each value in the dataframe
quotients_using_z <- apply(curve_quotients, 1, function(row) {
result <- sapply(row, perform_z_test)
if ("shifter" %in% result) {
return("shifter")
} else {
return("no shifter")
}
})
quotients_using_z <- data.frame(quotients_using_z)
colnames(quotients_using_z) <- "Result"
# Print the count of "shifter" values
table(quotients_using_z$Result)["shifter"]
# Get the row names of the "shifters" in quotients_using_z
shifter_rows <- rownames(quotients_using_z)[quotients_using_z$Result == "shifter"]
# Count the number of rows not found in comparison_RBP
not_found_rows <- sum(!(shifter_rows %in% rownames(comparison_RBP)))
# Print the total number of rows not found
cat("Total number of rows from 'shifters' in quotients_using_z not found in comparison_RBP:", not_found_rows, "\n")
# Function to calculate difference in y-values between global maxima #wo kommt die funktion her?
calculate_maxima_diff <- function(row_name, Mitosis_Ctrl_100, Mitosis_RNase_100) {
# Select the specific row from both dataframes #which one?
row_data_Ctrl <- Mitosis_Ctrl_mean[row_name, ]
row_data_RNase <- Mitosis_RNase_mean[row_name, ]
# Find the global maximum from the selected row in df1
row_global_max_Ctrl <- max(row_data_Ctrl)
# Find the global maximum from the selected row in df2
row_global_max_RNase <- max(row_data_RNase)
# Calculate the difference in y-values between the global maxima
y_diff <- row_global_max_Ctrl - row_global_max_RNase
# Return the difference in y-values
return(y_diff)
}
# Get the row names of df1
row_names <- rownames(Mitosis_Ctrl_mean)
# Apply the function to each row name
results <- sapply(row_names, calculate_maxima_diff)
# Create a dataframe with only the differences in y-values
results_yshift <- data.frame(YDiff = results)
# Print the results
print(results_yshift) #results as Dataframe - columns showing protein name and the difference
#as.vector(results_yshift) #results as vector - maybe better to work with afterwards, if needed
# Create an empty vector to store the results
results <- vector("logical", nrow(Mitosis_Ctrl_100))
# Iterate over each row
for (i in 1:nrow(Mitosis_Ctrl_100)) {
# Get the row data for Ctrl and RNase
row_data_Ctrl <- Mitosis_Ctrl_100[i, ]
row_data_RNase <- Mitosis_RNase_100[i, ]
# Find the peaks in the row data for Ctrl
peaks_Ctrl <- c()
for (j in 2:(length(row_data_Ctrl) - 1)) {
if (row_data_Ctrl[j] > row_data_Ctrl[j-1] && row_data_Ctrl[j] > row_data_Ctrl[j+1]) {
peaks_Ctrl <- c(peaks_Ctrl, j)
}
}
# Find the peaks in the row data for RNase
peaks_RNase <- c()
for (j in 2:(length(row_data_RNase) - 1)) {
if (row_data_RNase[j] > row_data_RNase[j-1] && row_data_RNase[j] > row_data_RNase[j+1]) {
peaks_RNase <- c(peaks_RNase, j)
}
}
# Compare the peaks between Ctrl and RNase
if (identical(peaks_Ctrl, peaks_RNase)) {
results[i] <- TRUE
} else {
results[i] <- FALSE
}
}
# Create a data frame with the results
identical_fractions <- data.frame(no_shift = results, row.names = row.names(Mitosis_Ctrl_100))
# Print the identical_fractions dataframe
print(identical_fractions)
identical_fractions["SQOR_HUMAN",] #-> FALSE, thus this protein is rightly identified as a shifter
sum(identical_fractions$no_shift == FALSE) #-> 1570 proteins are identified as shifters
# Filter rows with FALSE results in the "no_shift" column
local_shifter_names <- identical_fractions[identical_fractions$no_shift == FALSE, ]
# Print the new dataframe
print(local_shifter_names)
# Filter rows with FALSE results in the "no_shift" column
local_shifter_names <- identical_fractions[identical_fractions$no_shift == FALSE, ]
# Add row names as a new column
local_shifter_names$Row_Names <- rownames(local_shifter_names)
# Print the new dataframe
print(local_shifter_names)
# Filter rows with FALSE results in the "no_shift" column
local_shifter_names <- identical_fractions[identical_fractions$no_shift == FALSE, ]
# Add row names as a new column
local_shifter_names$Row_Names <- rownames(local_shifter_names)
# Reset row names of the new dataframe
rownames(local_shifter_names) <- NULL
# Print the new dataframe
print(local_shifter_names)
# Filter rows with FALSE results in the "no_shift" column
local_shifter_names <- identical_fractions[identical_fractions$no_shift == FALSE, ]
# Print the new dataframe
print(local_shifter_names)
# Filter rows with FALSE results in the "no_shift" column
local_shifter_names <- subset(identical_fractions, no_shift == FALSE)
# Print the new dataframe
print(local_shifter_names)
# Subtract the values and determine the shift
shift_result <- Ctrl_fraction_max - RNase_fraction_max
#Code which would only assign a shift of 0 to no shift
#shift_result <- ifelse(shift_result == 0, "no shift", ifelse(shift_result > 0, "left shift", "right shift"))
# Code which would assign a shift of 1 or less to "no shift": *HERE THE NUMBER CAN BE CHANGED!*
shift_result <- ifelse((shift_result >= -1) & (shift_result <= 1), "no shift", ifelse(shift_result > 1, "left shift", "right shift"))
# Create a new dataframe with the shift result and row names
shift_dataframe <- data.frame(Shift = shift_result, row.names = row.names(Ctrl_fraction_max))
colnames(shift_dataframe)[1] <- "Shift"
# Print the new dataframe
print(shift_dataframe)
shift_dataframe["RBM3_HUMAN",] #RBM3 is a sure shifter, siehe graph etc. (aber auch komplex)
# Filter rows with "left shift" or "right shift" in the shift_dataframe
max_shifter_names <- shift_dataframe[shift_dataframe$Shift %in% c("left shift", "right shift"), ]
# Print the subset
print(shift_subset)
# Filter rows with "left shift" or "right shift" in the shift_dataframe
max_shifter_names <- shift_dataframe[shift_dataframe$Shift %in% c("left shift", "right shift"), ]
# Print the subset
print(max_shifter_names)
# max shift:
# Filter rows with "left shift" or "right shift" in the shift_dataframe
max_shifter_names <- shift_dataframe[shift_dataframe$Shift %in% c("left shift", "right shift"), , drop = FALSE]
# Print the subset
print(max_shifter_names)
View(local_shifter_names)
# Create the shifting_quotients dataframe
shifting_quotients <- data.frame("Curve_shifters" = apply(curve_quotients, 1, function(row) {
if (any(row < (4/(4*1.7)) | row > 1.7)) { #Code so angepasst das direkt die Prozentzahlen eingetragen werden können. Alternatives Vorgehen: mit "signifikanter Abweichung" arbeiten. Aber wie definiert?)
"shifter"
} else {
"not shifter"
}
}))
# Print the shifting_quotients dataframe
print(shifting_quotients)
shifting_quotients["RBM3_HUMAN",] #RBM3 is a sure shifter, but a bit complex
sum(shifting_quotients$"Curve_shifters" == "shifter")
# Create a subset of shifting_quotients with "shifter" in the "Curve_shifters" column
subset_shifting_quotients <- shifting_quotients[shifting_quotients$Curve_shifters == "shifter", ]
# Print the subset
print(subset_shifting_quotients)
subset_shifting_quotients <- shifting_quotients[shifting_quotients$Curve_shifters == "shifter", , drop = FALSE]
# Print the subset
print(subset_shifting_quotients)
# max shift:
# Filter rows with "left shift" or "right shift" in the shift_dataframe:
max_shifter_names <- shift_dataframe[shift_dataframe$Shift %in% c("left shift", "right shift"), , drop = FALSE]
# local shift:
# Filter rows with FALSE results in the identical_fractions dataframe:
local_shifter_names <- subset(identical_fractions, no_shift == FALSE)
# curve shift:
# # Filter rows with "shifter" in the shifting_quotients dataframe:
subset_shifting_quotients <- shifting_quotients[shifting_quotients$Curve_shifters == "shifter", , drop = FALSE]
## I also checked the numbers, I did not loose any values.
# max shift:
# Filter rows with "left shift" or "right shift" in the shift_dataframe:
max_shifter_names <- shift_dataframe[shift_dataframe$Shift %in% c("left shift", "right shift"), , drop = FALSE]
# local shift:
# Filter rows with FALSE results in the identical_fractions dataframe:
local_shifter_names <- subset(identical_fractions, no_shift == FALSE)
# curve shift:
# # Filter rows with "shifter" in the shifting_quotients dataframe:
curve_shifter_names <- shifting_quotients[shifting_quotients$Curve_shifters == "shifter", , drop = FALSE]
## I also checked the numbers, I did not loose any values.
# Load the VennDiagram package
library(VennDiagram)
knitr::opts_chunk$set(echo = TRUE)
RDeeP_HeLa_Mitosis = read.csv("https://www.dropbox.com/s/ttj1z98mxefq0aj/RDeeP_HeLa_Mitosis.csv?dl=1", header=TRUE, row.names=1, sep = ";")
head(RDeeP_HeLa_Mitosis)
library(cluster)
library(ggplot2)
library(factoextra)
dim(RDeeP_HeLa_Mitosis)
head(rownames(RDeeP_HeLa_Mitosis))
head(colnames(RDeeP_HeLa_Mitosis))
which(rowSums(RDeeP_HeLa_Mitosis)==0)
print(RDeeP_HeLa_Mitosis["KLD10_HUMAN",])
RDeeP_HeLa_Mitosis <- RDeeP_HeLa_Mitosis[-which(rowSums(RDeeP_HeLa_Mitosis)==0),] #Habe hier das letzte Komma hinzugefügt und das = in ein <- geändert.
#Tabelle ohne die Nullzeile wieder in der Variable gespeichert
#We might have to repeat this later, for when we have separated Control and RNase, as the same argumentation applies if already only one of them only has zeros.
#which(rowSums(RDeeP_HeLa_Mitosis_Ctrl)==0)
#which(rowSums(RDeeP_HeLa_Mitosis_RNase)==0) #Careful, that we have to delete the the zero rows of RNase also in the Control Dataframe
dim(RDeeP_HeLa_Mitosis)
# Find rows without any zeros
nonzero_rows <- RDeeP_HeLa_Mitosis[rowSums(RDeeP_HeLa_Mitosis == 0) == 0, ]
#The condition rowSums(RDeep_Hela_Mitosis == 0) == 0 checks which rows have a sum of zeros equal to zero, indicating that those rows do *not* contain any zeros.Then we selects these rows without any zeros from our table and store it in a new table.
# Print the rows without any zeros: print(nonzero_rows)
nrow(nonzero_rows) #320 rows do not have zeros
#Possibly deleting these nonzero rows and storing it in the original matrix:
#RDeeP_HeLa_Mitosis <- RDeeP_HeLa_Mitosis[rowSums(RDeeP_HeLa_Mitosis == 0) > 0, ]
nrow(RDeeP_HeLa_Mitosis)
ncol(RDeeP_HeLa_Mitosis)
sum(apply(RDeeP_HeLa_Mitosis, 1, is.na)) # Summe aller Spalten, die NA Werte haben
sum(apply(RDeeP_HeLa_Mitosis, 2, is.na)) # Summe aller Zeilen, die NA Werte haben
sum(apply(RDeeP_HeLa_Mitosis, 1, is.numeric))
sum(apply(RDeeP_HeLa_Mitosis, 2, is.numeric))
sum(apply(RDeeP_HeLa_Mitosis, 1, is.numeric)) == nrow(RDeeP_HeLa_Mitosis)
#Complete DataSet
#View(RDeeP_HeLa_Mitosis)
# Extract the first three values from the table
protein1_Ctrl_frac1 <- RDeeP_HeLa_Mitosis[1, 1:3] #Zeile 1, Spalten eins bis drei
# Perform the t-test
print(t.test(protein1_Ctrl_frac1))
#beide schritte kann man theoretisch auch noch in einem vereinigen.
# Extract the first three values from the table
protein8_Ctrl_frac1 <- RDeeP_HeLa_Mitosis[8, 1:3]
# Perform the t-test
print(t.test(protein8_Ctrl_frac1))
#easiest way is to separately define the columns we want to put into the new data frame
RDeeP_HeLa_Mitosis_Ctrl = cbind(RDeeP_HeLa_Mitosis[,1:3],RDeeP_HeLa_Mitosis[,7:9],RDeeP_HeLa_Mitosis[,13:15],RDeeP_HeLa_Mitosis[,19:21],RDeeP_HeLa_Mitosis[,25:27],RDeeP_HeLa_Mitosis[,31:33],RDeeP_HeLa_Mitosis[,37:39],RDeeP_HeLa_Mitosis[,43:45],RDeeP_HeLa_Mitosis[,49:51],RDeeP_HeLa_Mitosis[,55:57],RDeeP_HeLa_Mitosis[,61:63],RDeeP_HeLa_Mitosis[,67:69],RDeeP_HeLa_Mitosis[,73:75],RDeeP_HeLa_Mitosis[,79:81],RDeeP_HeLa_Mitosis[,85:87],RDeeP_HeLa_Mitosis[,91:93],RDeeP_HeLa_Mitosis[,97:99],RDeeP_HeLa_Mitosis[,103:105],RDeeP_HeLa_Mitosis[,109:111],RDeeP_HeLa_Mitosis[,115:117],RDeeP_HeLa_Mitosis[,121:123],RDeeP_HeLa_Mitosis[,127:129],RDeeP_HeLa_Mitosis[,133:135],RDeeP_HeLa_Mitosis[,139:141],RDeeP_HeLa_Mitosis[,145:147])
#For RNase it is easier, because we now can just take all the row which were not taken in the first table.
RDeeP_HeLa_Mitosis_RNase=RDeeP_HeLa_Mitosis[,-which(names(RDeeP_HeLa_Mitosis) %in% colnames(RDeeP_HeLa_Mitosis_Ctrl))]
head(RDeeP_HeLa_Mitosis_RNase)
# Calculate the number of sets in the Control Dataset
num_sets <- ncol(RDeeP_HeLa_Mitosis_Ctrl) %/% 3
print(num_sets) #25 - number of fractions
# Create an empty dataframe to store the p-values
p_values_Ctrl <- data.frame(matrix(ncol = num_sets, nrow = nrow(RDeeP_HeLa_Mitosis_Ctrl)))
print(p_values_Ctrl)
# Iterate over every set of three columns
for (i in seq(1, ncol(RDeeP_HeLa_Mitosis_Ctrl), by = 3)) {
# Extract the values for the current set of three columns
column_values <- RDeeP_HeLa_Mitosis_Ctrl[, i:(i + 2)]
# Calculate the p-values for the set of three columns using t-tests
p_values <- apply(column_values, 1, function(x) {
if (length(unique(x)) > 1) {
t_result <- t.test(x)
t_result$p.value
} else {
0  # Assign 0 if the data is constant (OR NA, then we have to replace na with zero later on)
}
})
# Assign the p-values to the corresponding column in the new dataframe
p_values_Ctrl[, (i %/% 3 + 1)] <- p_values
}
# Optional: Rename the columns
colnames(p_values_Ctrl) <- paste("P-Values_Frac", 1:25,sep="")
rownames(p_values_Ctrl) <- rownames(RDeeP_HeLa_Mitosis_Ctrl)
# Print the new dataframe
print(p_values_Ctrl)
# Replace NA values with zero in p_values_Ctrl dataframe
# p_values_Ctrl[is.na(p_values_Ctrl)] <- 0
# Create a new dataframe to store the maximum values
max_values_Ctrl <- data.frame(MaxValue = apply(p_values_Ctrl[, -1], 1, max))
# Adding the protein names to the new dataframe:
rownames(max_values_Ctrl) <- rownames(p_values_Ctrl)
# Print the new dataframe
print(max_values_Ctrl)
# Calculate the number of sets in the RNase dataset
num_sets <- ncol(RDeeP_HeLa_Mitosis_RNase) %/% 3
# Create an empty dataframe to store the p-values
p_values_RNase <- data.frame(matrix(ncol = num_sets, nrow = nrow(RDeeP_HeLa_Mitosis_RNase)))
# Iterate over every set of three columns
for (i in seq(1, ncol(RDeeP_HeLa_Mitosis_RNase), by = 3)) {
# Extract the values for the current set of three columns
column_values <- RDeeP_HeLa_Mitosis_RNase[, i:(i + 2)]
# Calculate the p-values for the set of three columns using t-tests
p_values <- apply(column_values, 1, function(x) {
if (length(unique(x)) > 1) {
t_result <- t.test(x)
t_result$p.value
} else {
0  # Assign 0 if the data is constant (OR NA, then we have to replace na with zero later on)
}
})
# Assign the p-values to the corresponding column in the new dataframe
p_values_RNase[, (i %/% 3 + 1)] <- p_values
}
